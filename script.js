"use strict";

// DEFAULT PARAMETERS

/* Le code d√©clare une fonction appel√©e createBooking qui prend 
en param√®tre trois arguments : flightNum, numPassengers et price. 
La fonction cr√©e ensuite un objet avec ces 3 propri√©t√©s et l'affiche 
dans la console avant de le pousser dans un tableau appel√© bookings.

Le second param√®tre, numPassengers, est par d√©faut √† 1 si non pr√©cis√©. 
De m√™me, le troisi√®me param√®tre, price, est mis √† 199 * numPassengers 
par d√©faut s'il n'est pas sp√©cifi√©.

Le code appelle la fonction createBooking quatre fois avec diff√©rentes 
combinaisons d'arguments. Dans la derni√®re invocation, nous fournissons 
seulement une valeur pour flightNum et nous laissons les deux autres param√®tres 
√† leurs valeurs par d√©faut, i.e. undefined. Cet appel sera √©quivalent √† 
celui-ci : createBooking("LH123", 1, 199); 
o√π numPassengers et price sont calcul√©s √† partir de leurs valeurs par d√©faut. */

// Initialize an empty array to store bookings
const bookings = [];

// Create a function called createBooking that accepts three parameters, with the last two having default values.
const createBooking = function (flightNum, numPassengers = 1, price = 199) {
    // ES5 Syntax (used before ES6):
    // numPassengers = numPassengers || 1;
    // price = price || 199;

    // Create a booking object with the provided or default parameters
    const booking = {
        flightNum,
        numPassengers,
        price,
    };

    // Print the booking object to the console
    console.log(booking);

    // Add the booking object to the bookings array
    bookings.push(booking);
};

// Call the createBooking function with different sets of arguments to test its behavior
createBooking("LH123"); // prints {flightNum: "LH123", numPassengers: 1, price: 199} and adds the object to the bookings array
createBooking("LH123", 2, 800); // prints {flightNum: "LH123", numPassengers: 2, price: 800} and adds the object to the bookings array
createBooking("LH123", 2); // prints {flightNum: "LH123", numPassengers: 2, price: 199} and adds the object to the bookings array
createBooking("LH123", 5); // prints {flightNum: "LH123", numPassengers: 5, price: 199} and adds the object to the bookings array
createBooking("LH123", undefined, 1000); // prints {flightNum: "LH123", numPassengers: 1, price: 1000} and adds the object to the bookings array (using undefined as a placeholder for the second argument)

// -------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------

// How passing arg works: Value vs reference

/* Cet exemple de code montre comment le passage d'une valeur, 
comme un type de donn√©es primitif - dans ce cas "LH234" en tant 
que variable flight - fonctionne diff√©remment du passage d'une r√©f√©rence, 
telle qu'un objet avec des propri√©t√©s telles que jonas dans l'exemple ci-dessous.

Lors du passage d'une valeur, la fonction prendra une copie de cette valeur 
et les modifications apport√©es √† celle-ci n'affecteront pas la variable originale 
en dehors de la fonction. Cela s'appelle ¬´ passer par valeur ¬ª.

Lorsqu'une r√©f√©rence est pass√©e, la fonction prendra une r√©f√©rence (un pointeur) √† 
l'objet original et les modifications apport√©es √† celui-ci dans le corps de la fonction 
seront refl√©t√©es dans la copie originale de l'objet en dehors de la fonction. 
Cela s'appelle ¬´ passer par r√©f√©rence ¬ª.

Dans l'exemple, nous voyons les deux techniques utilis√©es. Le num√©ro de vol est transmis 
sous forme de cha√Æne standard et ensuite modifi√© dans le corps de la fonction, 
mais √©tant donn√© que les cha√Ænes sont un type de donn√©es primitives, la valeur originale 
reste inchang√©e en dehors du corps de la fonction.

Cependant, l'objet jonas est pass√© par r√©f√©rence. Lorsque la fonction modifie la propri√©t√© nom, 
elle affecte l'objet original dans le contexte global, et les changements sont visibles en dehors 
du corps de la fonction. De plus, le num√©ro de passeport est g√©n√©r√© al√©atoirement √† l'aide d'une 
nouvelle fonction de passeport, o√π l'objet jonas est pass√© par r√©f√©rence et donc les changements 
dans la propri√©t√© passeport sont √©galement visibles dans le contexte global. */

// D√©claration de la variable flight avec la valeur 'LH234'
const flight = "LH234";

// D√©claration d'un objet jonas avec deux propri√©t√©s : name et passport
const jonas = {
    name: "Jonas Schmedtmann",
    passport: 24739479284,
};

// D√©claration d'une fonction checkIn avec deux param√®tres : flightNum et passenger
const checkIn = function (flightNum, passenger) {
    // La valeur de flightNum est chang√©e √† 'LH999'
    flightNum = "LH999";
    // La propri√©t√© name de l'objet passenger est modifi√©e en ajoutant 'Mr. ' au d√©but
    passenger.name = "Mr. " + passenger.name;

    // V√©rification que le num√©ro de passeport du passager correspond √† la valeur attendue
    if (passenger.passport === 24739479284) {
        console.log("Checked in");
    } else {
        console.log("Wrong passport!");
    }
};

// Appel de la fonction checkIn avec les arguments flight et jonas
// checkIn(flight, jonas);

// Affichage de la valeur de la variable flight dans la console
// console.log(flight);

// Affichage de l'objet jonas dans la console
// console.log(jonas);

// La partie suivante est un commentaire qui explique ce qui se passe dans le code ci-dessus
// C'est la m√™me chose que de faire...
// const flightNum = flight;
// const passenger = jonas;

// D√©claration d'une fonction newPassport avec un param√®tre person
const newPassport = function (person) {
    // La propri√©t√© passport de l'objet person est modifi√©e avec une valeur al√©atoire entre 0 et 100000 (arrondie √† l'entier inf√©rieur)
    person.passport = Math.trunc(Math.random() * 100000);
};

// Appel de la fonction newPassport avec l'objet jonas comme argument
newPassport(jonas);

// Appel de la fonction checkIn avec les arguments flight et jonas (qui a maintenant un nouveau num√©ro de passeport)
checkIn(flight, jonas);

// -------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------

// Fonctions accepting Callback Functions

/* Ce code illustre comment utiliser des fonction callback en JavaScript. 
La fonction transformer() est une fonction de haut niveau - elle prend en 
compte deux arguments, la cha√Æne et une fonction callback. Cette fonction 
ex√©cutera alors la fonction callback donn√©e sur la cha√Æne, retournant une 
version transform√©e de l'argument d'entr√©e.

Les fonctions oneWord() et upperFirstWord() sont toutes deux des fonctions callback. 
Dans cet exemple, upperFirstWord() mettra en majuscule le premier mot de la cha√Æne d'entr√©e, 
tandis que oneWord() transformera la cha√Æne compl√®te en un mot en minuscules (en rempla√ßant tous les espaces par rien).

Enfin, high5() est un autre exemple de callback qui sera ex√©cut√© √† plusieurs reprises, 
par exemple dans une boucle. Dans ce cas particulier, lorsque le corps du document est 
cliqu√© ou lorsqu‚Äôun tableau de noms est it√©r√© dans une boucle, la fonction callback high5() est invoqu√©e. */

// Cette fonction prend une cha√Æne de caract√®res et renvoie une version en minuscules sans espaces
const oneWord = function (str) {
    return str.replaceAll(" ", " ").toLowerCase();
};

// Cette fonction prend une cha√Æne de caract√®res et renvoie une version avec le premier mot en majuscule pour chaque mot
const upperFirstWord = function (str) {
    const [first, ...others] = str.split(" ");
    return [first.toUpperCase(), ...others].join(" ");
};

// Cette fonction prend une cha√Æne de caract√®res et une fonction de transformation, applique la fonction de transformation √† la cha√Æne de caract√®res, puis affiche la cha√Æne de caract√®res d'origine, la cha√Æne transform√©e et le nom de la fonction de transformation utilis√©e
const transformer = function (str, fn) {
    console.log(`Original string: ${str}`);
    console.log(`Transform string ${fn(str)}`);
    console.log(`Transformed by: ${fn.name}`);
};

// Applique la fonction upperFirstWord √† la cha√Æne de caract√®res 'JavaScript is the best!' et affiche le r√©sultat
transformer("JavaScript is the best!", upperFirstWord);

// Applique la fonction oneWord √† la cha√Æne de caract√®res 'JavaScript is the best!' et affiche le r√©sultat
transformer("JavaScript is the best!", oneWord);

// D√©clare une fonction high5 qui affiche un emoji "rock on" dans la console
const high5 = function () {
    console.log("ü§ü");
};

// Attache la fonction high5 √† l'√©v√©nement click du corps du document, de sorte que chaque clic sur le corps du document affiche l'emoji "rock on" dans la console
document.body.addEventListener("click", high5);

// Applique la fonction high5 √† chaque √©l√©ment du tableau ['Jonas', 'Martha', 'Adam'], de sorte que chaque √©l√©ment affiche l'emoji "rock on" dans la console
["Jonas", "Martha", "Adam"].forEach(high5);